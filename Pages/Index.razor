@using System.Security.Cryptography;
@using ServersideProjektH5.Models;
@inject ServersideProjektH5.Codes.Encryption _encryption;
@page "/"

<PageTitle>To Do Site</PageTitle>

@if (isAuthenticated)
{
    <h1>To Do for @currentUser</h1>

    <EditForm class="d-flex flex-column w-75 mx-auto p-2" Model="@toDoModel" OnValidSubmit="@HandleValidSubmit">
        <label for="title">Title: </label>
        <InputText id="title" @bind-Value="toDoModel.Title" />
        <label for="description">Description: </label>
        <InputTextArea id="description" @bind-Value="toDoModel.Description" />

        <button type="submit">Submit</button>
    </EditForm>
}
else
{
    <h3>Please log in...</h3>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    private string? currentUser { get; set; }
    private bool isAuthenticated { get; set; }

    protected override async void OnInitialized()
    {
        var authState = await authStateTask;

        currentUser = authState.User.Identity.Name;
        isAuthenticated = authState.User.Identity.IsAuthenticated;

        //string result = _encryption.Protect("Hello");
        //result = _encryption.Unprotect(result);

        //string myPass = "Passw0rd!";
        //string? salt = "dfsdgdfjgfjyerg4t5yu6jh";

        //MD5 md5 = MD5.Create();
        //byte[] passwordBytes = System.Text.Encoding.UTF8.GetBytes(myPass + salt);
        //byte[] hash = md5.ComputeHash(passwordBytes);
        //string hashToString = Convert.ToBase64String(hash);

        //string bCryptSalt = BCrypt.Net.BCrypt.GenerateSalt();
        //bCryptSalt = "$2a$11$VG4JBOi1NCu/F/.sSR2vq.";
        //string bCryptHash = BCrypt.Net.BCrypt.HashPassword(myPass, bCryptSalt);
        //bool hasMatched = BCrypt.Net.BCrypt.Verify(myPass, bCryptHash);
    }

    private ToDoModel toDoModel = new();

    private void HandleValidSubmit()
    {
        var title = toDoModel.Title;
        var description = toDoModel.Description;
    }
}