@using System.Security.Cryptography;
@using ServersideProjektH5.Codes;
@using ServersideProjektH5.Data;
@using ServersideProjektH5.Models;
@inject ServersideProjektH5.Codes.Encryption _encryption;
@inject ServersideProjektH5.Codes.ToDoRepo _toDoRepo;
@inject NavigationManager UriHelper
@page "/"

<PageTitle>To Do Site</PageTitle>

@if (isAuthenticated)
{
    <h1>To Do for @currentUser</h1>

    @foreach(var todo in userToDoList)
    {
        <div class="d-flex p-1 mx-auto">
            <p>Title: @_encryption.Unprotect(todo.Title) - Description: @_encryption.Unprotect(todo.Description)</p>
        </div>
    }

    <EditForm class="d-flex flex-column w-75 mx-auto p-2" Model="@toDoModel" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator/>
        <h2>Create new To Do...</h2>
        <label for="title">Title: </label>
        <InputText id="title" @bind-Value="toDoModel.Title" />
        <label for="description">Description: </label>
        <InputTextArea id="description" @bind-Value="toDoModel.Description" />

        <button type="submit">Submit</button>
    </EditForm>

    <button @onclick="NavigateToHashing">Check hashing</button>
    <button @onclick="NavigateToHashingWithAttack">Check hashing med angreb</button>

    <h5>
        @if (message != null && message.Trim() != "")
        {
            @message
        }
    </h5>
}
else
{
    <h3>Please log in...</h3>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? _authStateTask { get; set; }
    private ToDoDBContext? _dBContext { get; set; }

    private string message { get; set; } = "";
    private bool isAuthenticated { get; set; }
    public static List<ToDoModel> userToDoList { get; set; } = new List<ToDoModel>();
    public static string? currentUser { get; set; }

    protected override async void OnInitialized()
    {
        GetAllToDos();
    }

    private ToDoModel toDoModel = new();

    private async void HandleValidSubmit()
    {
        message = null;
        var authState = await _authStateTask;


        if (authState.User.Identity.IsAuthenticated && authState.User.Identity.Name != null)
        {
            ToDoModel toDo = new();

            toDo.Title = _encryption.Protect(toDoModel.Title);
            toDo.Description = _encryption.Protect(toDoModel.Description);
            toDo.User = authState.User.Identity.Name;

            toDoModel.Title = "";
            toDoModel.Description = "";

            message = _toDoRepo.InsertToDoAsync(toDo) ? "To Do was successfully saved!" : "An error occured... Try again?";
            GetAllToDos();
        }
    }

    private void HandleInvalidSubmit()
    {
        message = "Please fill both fields...";
    }

    private async void GetAllToDos()
    {
        if (_authStateTask != null)
        {
            var authState = await _authStateTask;

            currentUser = authState.User.Identity.Name;
            isAuthenticated = authState.User.Identity.IsAuthenticated;

            if (isAuthenticated)
            {
                var todos = _toDoRepo.GetAllToDosByUsernameAsync(authState.User.Identity.Name);
                userToDoList = (List<ToDoModel>)todos;
            }
        }
    }

    private void NavigateToHashing()
    {
        UriHelper.NavigateTo("/hashing");
    }

    private void NavigateToHashingWithAttack()
    {
        Hashing.isAttack = true;
        UriHelper.NavigateTo("/hashing");
    }
}